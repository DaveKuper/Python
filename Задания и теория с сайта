Программное обеспечение 2 вида: Системное и Прикладное ПО
Системное - ОС,прошивка,архиваторы и тд
Прикладное - Графические и текстовые редакторы , видеоплееры
Схема взаимодействия пользователя ,программы, ОС и железа:
Пользователь -> Программа -> Операционная система -> Железо | 
                       Пользователь<-Операционная система<- |

Любой алгоритм должен обладать следующими свойствами:

Дискретность: алгоритм разбивается на конечное число элементарных действий (шагов).(Дискретность в данном случае,разбиение задачи на подзадачи)
Понятность: каждое из этих элементарных действий является законченным и понятным.
Детерминированность: каждое действие должно пониматься в строго определенном смысле (пониматься однозначно).
Массовость: по данному алгоритму должна решаться не одна, а целый класс подобных задач.
Результативность: любой алгоритм в процессе выполнения должен приводить к определенному результату (в т.ч. отрицательному).

Типизация - работа не с битами и байтами а с абстрактными данными типами.
Python неявная,динамическая,сильная типизация
Неявная то что переменную можно указать неявно a=5 питон определит что это целочисленная переменная в момент выполнения
Динамическая - то что все типы данных определяются в момент выполнения
Сильная - не позволяет смешивать типы данных

-- НАЧАЛО --

-- описание объектов --

Чайник
  Свойства
    - объем_налитой_воды
  Методы
    - достаточно_воды_для_заваривания_чая? (да/нет)
    - закипел? (да/нет)
    - подключить_к_сети(Розетка)
    - включить

Кран
  Методы
    - открыть
    - закрыть

Человек
  Методы
    - прочитать_новость_в_Интернете
    - посмотреть_в_окно
    - посмотреть_уровень_воды_в_чайнике(Чайник)

Розетка
  Свойства
    - свободна?
  Методы
    - освободить

-- основной алгоритм --

Чайник1 = Чайник()
Человек1 = Человек()
Кран1 = Кран()
Розетка1 = Розетка()

ЕСЛИ НЕ Чайник1.достаточно_воды_для_заваривания_чая?
  Кран1.открыть
  ПОКА НЕ Чайник1.достаточно_воды_для_заваривания_чая?
    Человек1.посмотреть_уровень_воды_в_чайнике(Чайник1)
  Кран1.закрыть

ЕСЛИ Розетка1.свободна?
  Розетка1.освободить
Чайник1.подключить_к_сети(Розетка1)
Чайник1.включить

ПОКА НЕ Чайник1.закипел?
  Человек1.прочитать_новость_в_Интернете
  Человек1.посмотреть_в_окно

-- КОНЕЦ --


Практикум:

1.Приведите определение суперкомпьютера и небольшую справку об их назначении и типовом применении.
  Суперкомпью́тер (с англ. — «Supercomputer», СверхЭВМ, СуперЭВМ, сверхвычисли́тель) — специализированная вычислительная машина, значительно превосходящая по своим техническим параметрам и скорости вычислений большинство существующих в мире компьютеров.

Как правило, современные суперкомпьютеры представляют собой 
большое число высокопроизводительных серверных компьютеров, 
соединённых друг с другом локальной высокоскоростной магистралью 
для достижения максимальной производительности в рамках подхода распараллеливания вычислительной задачи.


2.Перейдите на сайт TOP500 Supercomputer Sites и откройте список суперкомпьютеров 
(меню List -> [Первый пункт]), на основании которого соберите информацию о 10 суперкомпьютерах:



№	Задача
1	Решение квадратного уравнения
2	Поиск n-го члена геометрической прогрессии
3	Нахождение наибольшего общего делителя (алгоритм Евклида)
4	Определение простоты числа (перебор делителей)
5	Попадание заданной точки в координатную четверть
6	Поиск n-го члена арифметической прогрессии
7	Определение площади треугольника по формуле Герона
8	Решение линейного уравнения
9	Поиск n-го члена ряда Фибоначчи
10	Определение количества дней между датами


1.from math import *

def example(a,b,c):

    D = (b*b) - (4*a*c)

    if D == 0 :
        x1= (b/(2*a))*(-1)
        x2=x1
        print("Корень всего лишь 1" +str(x2))
    elif D > 0 :
        x1 = ((b*(-1))+(sqrt(D)))/2*a
        x2 = ((b*(-1))-(sqrt(D)))/2*a
        print("Корень1="+str(x1)+" ,"+ "Корень2="+str(x2))
    else :
        print("Корней нет")




print("Дано уравнение ax2 + bx +c = 0. Чему равно уравнение?")

a = example(5,4,0)

2.





















